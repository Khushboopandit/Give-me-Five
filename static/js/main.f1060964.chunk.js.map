{"version":3,"sources":["Components/list.js","Components/main.js","serviceWorker.js","index.js"],"names":["ListOfWords","className","this","props","letter","count","React","PureComponent","letters","Main","addNewWord","list","state","words","obj","selectedLetters","letterCount","push","setState","map","type","key","onClick","length","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAaeA,G,6KARX,OACE,yBAAKC,UAAU,wDACX,uBAAGA,UAAU,eAAeC,KAAKC,MAAMC,QAD3C,IACuD,yBAAKH,UAAU,kFAAiF,0BAAMA,UAAU,qBAAqBC,KAAKC,MAAME,a,GAJnLC,IAAMC,gBCE1BC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAwE/CC,E,kDAnEb,aAAe,IAAD,8BACZ,gBASFC,WAAa,WACX,IAAIC,EAAO,EAAKC,MAAMC,MACpBC,EAAM,CACJV,OAAQ,EAAKQ,MAAMG,gBACnBV,MAAO,EAAKO,MAAMI,aAEtBL,EAAKM,KAAKH,GACV,EAAKI,SAAS,CAAEL,MAAOF,EAAMI,gBAAiB,GAAIC,YAAa,QAf/D,EAAKJ,MAAQ,CACXC,MAAO,GACPE,gBAAiB,GACjBC,YAAa,MALH,E,qDAmBJ,IAAD,OACP,OACE,yBAAKf,UAAU,kBACb,yBAAKA,UAAU,gDAEZO,EAAQW,KAAI,SAACf,GAAD,OACX,4BACEgB,KAAK,SACLC,IAAKjB,EAAS,EACdkB,QAAS,kBACP,EAAKJ,SAAS,CACZH,gBAAiB,EAAKH,MAAMG,gBAAkBX,EAC9CY,aAAc,EAAKJ,MAAMG,gBAAkBX,GAAQmB,UAGvDtB,UAAU,iEAETG,OAMNF,KAAKU,MAAMG,gBAAgBQ,OAAS,EACnC,oCACE,kBAAC,EAAD,CACEnB,OAAQF,KAAKU,MAAMG,gBACnBV,MAAOH,KAAKU,MAAMI,cAEpB,4BACEI,KAAK,SACLE,QAASpB,KAAKQ,WACdT,UAAU,8CAHZ,QAQA,KAGHC,KAAKU,MAAMC,MAAMM,KAAI,SAACK,GAAD,OACpB,kBAAC,EAAD,CAAapB,OAAQoB,EAAKpB,OAAQC,MAAOmB,EAAKnB,MAAOgB,IAAKG,EAAKpB,OAAO,uB,GA9D7DE,IAAMC,eCILkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f1060964.chunk.js","sourcesContent":["import React from \"react\";\n\n// Component for showing the word and word length\nclass ListOfWords extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"d-flex justify-content-between font-weight-bold f-38\">\n          <p className=\"dotted-line\">{this.props.letter}</p> <div className=\"rounded-circle bg-danger div-circular text-light justify-content-center d-flex\"><span className=\"align-self-center\">{this.props.count}</span></div>\n      </div>\n    );\n  }\n}\n\nexport default ListOfWords;\n","import React from \"react\";\nimport \"../CSS/main.css\";\nimport ListOfWords from \"./list\";\n\n// Dummy list \nconst letters = [\"p\", \"L\", \"P\", \"T\", \"S\", \"A\", \"C\", \"E\", \"H\", \"D\"];\n\n// Using Pure.Component for handling rerendering\nclass Main extends React.PureComponent {\n  // Initializing the state\n  constructor() {\n    super();\n    this.state = {\n      words: [],\n      selectedLetters: \"\",\n      letterCount: null,\n    };\n  }\n\n  //Adding new word to the list \n  addNewWord = () => {\n    let list = this.state.words,\n      obj = {\n        letter: this.state.selectedLetters,\n        count: this.state.letterCount,\n      };\n    list.push(obj);\n    this.setState({ words: list, selectedLetters: \"\", letterCount: null });\n  };\n  render() {\n    return (\n      <div className=\"container mt-3\">\n        <div className=\"d-flex flex-wrap justify-content-center mb-5\">\n          {/* iterating over a map */}\n          {letters.map((letter) => (\n            <button\n              type=\"button\"\n              key={letter + 1}\n              onClick={() =>\n                this.setState({\n                  selectedLetters: this.state.selectedLetters + letter,\n                  letterCount: (this.state.selectedLetters + letter).length,\n                })\n              }\n              className=\"btn btn-outline-danger btn-circle btn-xl m-3 font-weight-bold\"\n            >\n              {letter}\n            </button>\n          ))}\n        </div>\n\n        {/* Ternary operator for rendering conditionaly */}\n        {this.state.selectedLetters.length > 0 ? (\n          <>\n            <ListOfWords\n              letter={this.state.selectedLetters}\n              count={this.state.letterCount}\n            />\n            <button\n              type=\"button\"\n              onClick={this.addNewWord}\n              className=\"btn btn-success px-3 font-weight-bold mb-5\"\n            >\n              Add\n            </button>\n          </>\n        ) : null}\n\n        {/* Displaying a list */}\n        {this.state.words.map((item) => (\n          <ListOfWords letter={item.letter} count={item.count} key={item.letter+\"is showing\"}/>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Components/main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}